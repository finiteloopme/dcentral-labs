// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chain/v1alpha1/chain.proto

package chainv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/finiteloopme/dcentral-labs/chain-data-stream/api/gen/chain/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChainReadingServiceName is the fully-qualified name of the ChainReadingService service.
	ChainReadingServiceName = "chain.v1alpha1.ChainReadingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChainReadingServiceStartProcedure is the fully-qualified name of the ChainReadingService's Start
	// RPC.
	ChainReadingServiceStartProcedure = "/chain.v1alpha1.ChainReadingService/Start"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	chainReadingServiceServiceDescriptor     = v1alpha1.File_chain_v1alpha1_chain_proto.Services().ByName("ChainReadingService")
	chainReadingServiceStartMethodDescriptor = chainReadingServiceServiceDescriptor.Methods().ByName("Start")
)

// ChainReadingServiceClient is a client for the chain.v1alpha1.ChainReadingService service.
type ChainReadingServiceClient interface {
	Start(context.Context, *connect.Request[v1alpha1.StartChainReadingRequest]) (*connect.Response[v1alpha1.StartChainReadingResponse], error)
}

// NewChainReadingServiceClient constructs a client for the chain.v1alpha1.ChainReadingService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChainReadingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChainReadingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chainReadingServiceClient{
		start: connect.NewClient[v1alpha1.StartChainReadingRequest, v1alpha1.StartChainReadingResponse](
			httpClient,
			baseURL+ChainReadingServiceStartProcedure,
			connect.WithSchema(chainReadingServiceStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// chainReadingServiceClient implements ChainReadingServiceClient.
type chainReadingServiceClient struct {
	start *connect.Client[v1alpha1.StartChainReadingRequest, v1alpha1.StartChainReadingResponse]
}

// Start calls chain.v1alpha1.ChainReadingService.Start.
func (c *chainReadingServiceClient) Start(ctx context.Context, req *connect.Request[v1alpha1.StartChainReadingRequest]) (*connect.Response[v1alpha1.StartChainReadingResponse], error) {
	return c.start.CallUnary(ctx, req)
}

// ChainReadingServiceHandler is an implementation of the chain.v1alpha1.ChainReadingService
// service.
type ChainReadingServiceHandler interface {
	Start(context.Context, *connect.Request[v1alpha1.StartChainReadingRequest]) (*connect.Response[v1alpha1.StartChainReadingResponse], error)
}

// NewChainReadingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChainReadingServiceHandler(svc ChainReadingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chainReadingServiceStartHandler := connect.NewUnaryHandler(
		ChainReadingServiceStartProcedure,
		svc.Start,
		connect.WithSchema(chainReadingServiceStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/chain.v1alpha1.ChainReadingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChainReadingServiceStartProcedure:
			chainReadingServiceStartHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChainReadingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChainReadingServiceHandler struct{}

func (UnimplementedChainReadingServiceHandler) Start(context.Context, *connect.Request[v1alpha1.StartChainReadingRequest]) (*connect.Response[v1alpha1.StartChainReadingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chain.v1alpha1.ChainReadingService.Start is not implemented"))
}
