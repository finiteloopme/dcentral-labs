# Cloud Build configuration for destroying Terraform infrastructure
# USE WITH EXTREME CAUTION - This will destroy all resources

substitutions:
  _TERRAFORM_VERSION: '1.9.8'
  _ENVIRONMENT: 'dev'
  _CONFIRM_DESTROY: 'false'  # Must be explicitly set to 'true' to destroy
  _REGION: 'us-central1'
  _ZONE: 'us-central1-a'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

steps:
  # Step 1: Safety check
  - id: 'safety-check'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "========================================="
        echo "WARNING: INFRASTRUCTURE DESTRUCTION"
        echo "========================================="
        echo "Environment: ${_ENVIRONMENT}"
        echo "Project: ${PROJECT_ID}"
        echo "========================================="
        
        if [ "${_CONFIRM_DESTROY}" != "true" ]; then
          echo "ERROR: Destruction not confirmed!"
          echo "Set _CONFIRM_DESTROY=true to proceed"
          exit 1
        fi
        
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "ERROR: Cannot destroy production via this config!"
          echo "Production destruction requires special procedure"
          exit 1
        fi
        
        echo "Proceeding with destruction in 10 seconds..."
        echo "Press Ctrl+C to cancel"
        sleep 10

  # Step 2: Backup state before destruction
  - id: 'backup-state'
    name: 'gcr.io/cloud-builders/gsutil'
    args:
      - 'cp'
      - '-r'
      - 'gs://${PROJECT_ID}-terraform-state/midnight-platform/${_ENVIRONMENT}/*'
      - 'gs://${PROJECT_ID}-terraform-state/backups/destroy-${BUILD_ID}/'

  # Step 3: Initialize Terraform
  - id: 'terraform-init'
    name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform
        terraform init \
          -backend-config="bucket=${PROJECT_ID}-terraform-state" \
          -backend-config="prefix=midnight-platform/${_ENVIRONMENT}" \
          -input=false

  # Step 4: Select workspace
  - id: 'terraform-workspace'
    name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform
        terraform workspace select ${_ENVIRONMENT}

  # Step 5: Plan destruction
  - id: 'terraform-plan-destroy'
    name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform
        terraform plan -destroy \
          -var="project_id=${PROJECT_ID}" \
          -var="environment=${_ENVIRONMENT}" \
          -var="region=${_REGION}" \
          -var="zone=${_ZONE}" \
          -out=destroy.tfplan \
          -input=false
        
        terraform show destroy.tfplan > destroy-plan.txt
        echo "Destruction plan created. Review destroy-plan.txt"

  # Step 6: Destroy infrastructure
  - id: 'terraform-destroy'
    name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform
        echo "Destroying infrastructure..."
        terraform apply destroy.tfplan
        
        echo "========================================="
        echo "Infrastructure destroyed successfully"
        echo "Environment: ${_ENVIRONMENT}"
        echo "========================================="

  # Step 7: Clean up artifacts
  - id: 'cleanup'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Cleaning up artifacts..."
        
        # Remove container images for this environment
        gcloud artifacts docker images delete \
          ${_REGION}-docker.pkg.dev/${PROJECT_ID}/midnight-platform/workstation:${_ENVIRONMENT} \
          --quiet || true

artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-terraform-state/destroy-logs/${BUILD_ID}'
    paths:
      - 'terraform/destroy-plan.txt'

timeout: '1800s'

tags:
  - 'terraform-destroy'
  - '${_ENVIRONMENT}'