# Cloud Build configuration for importing existing resources into Terraform state
# Use this when resources already exist in GCP and need to be managed by Terraform

substitutions:
  _TERRAFORM_VERSION: '1.9.8'
  _ENVIRONMENT: 'dev'
  _REGION: 'us-central1'
  _ZONE: 'us-central1-a'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Use user-managed service account for Cloud Build
serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/midnight-cloudbuild-sa@${PROJECT_ID}.iam.gserviceaccount.com'

steps:
  # Step 1: Initialize Terraform
  - id: 'terraform-init'
    name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform
        echo "Initializing Terraform with GCS backend..."
        terraform init \
          -backend-config="bucket=${PROJECT_ID}-terraform-state" \
          -backend-config="prefix=midnight-platform/${_ENVIRONMENT}" \
          -input=false

  # Step 2: Import Workstation Cluster
  - id: 'import-workstation-cluster'
    name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform
        echo "========================================="
        echo "Importing existing resources"
        echo "========================================="
        
        # Set Terraform variables
        export TF_VAR_project_id="${PROJECT_ID}"
        export TF_VAR_region="${_REGION}"
        export TF_VAR_zone="${_ZONE}"
        export TF_VAR_environment="${_ENVIRONMENT}"
        
        # Function to safely import resources
        import_resource() {
          local resource_addr="$1"
          local resource_id="$2"
          local resource_name="$3"
          
          echo "Checking if $resource_name exists in state..."
          if terraform state show "$resource_addr" 2>/dev/null; then
            echo "✓ $resource_name already in state"
          else
            echo "Importing $resource_name..."
            if terraform import "$resource_addr" "$resource_id"; then
              echo "✓ Successfully imported $resource_name"
            else
              echo "⚠ Could not import $resource_name (may not exist)"
            fi
          fi
        }
        
        # Import Workstation Cluster
        import_resource \
          "module.workstations.google_workstations_workstation_cluster.cluster" \
          "projects/${PROJECT_ID}/locations/${_REGION}/workstationClusters/midnight-${_ENVIRONMENT}-cluster" \
          "Workstation Cluster"
        
        # Import Workstation Config
        import_resource \
          "module.workstations.google_workstations_workstation_config.config" \
          "projects/${PROJECT_ID}/locations/${_REGION}/workstationClusters/midnight-${_ENVIRONMENT}-cluster/workstationConfigs/midnight-${_ENVIRONMENT}-config" \
          "Workstation Configuration"
        
        # Import VPC Network
        import_resource \
          "module.networking.google_compute_network.vpc" \
          "projects/${PROJECT_ID}/global/networks/midnight-${_ENVIRONMENT}-vpc" \
          "VPC Network"
        
        # Import Subnet
        import_resource \
          "module.networking.google_compute_subnetwork.subnet" \
          "projects/${PROJECT_ID}/regions/${_REGION}/subnetworks/midnight-${_ENVIRONMENT}-subnet" \
          "Subnet"
        
        # Import NAT IP Address
        import_resource \
          "module.networking.google_compute_address.nat_ip" \
          "projects/${PROJECT_ID}/regions/${_REGION}/addresses/midnight-${_ENVIRONMENT}-nat-ip" \
          "NAT IP Address"
        
        # Import Cloud Router
        import_resource \
          "module.networking.google_compute_router.router" \
          "projects/${PROJECT_ID}/regions/${_REGION}/routers/midnight-${_ENVIRONMENT}-router" \
          "Cloud Router"
        
        # Import Cloud NAT
        import_resource \
          "module.networking.google_compute_router_nat.nat" \
          "midnight-${_ENVIRONMENT}-router/midnight-${_ENVIRONMENT}-nat" \
          "NAT Gateway"
        
        # Import Artifact Registry
        import_resource \
          "module.registry.google_artifact_registry_repository.midnight_images" \
          "projects/${PROJECT_ID}/locations/${_REGION}/repositories/midnight-images" \
          "Artifact Registry"

  # Step 3: Show state after import
  - id: 'show-state'
    name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform
        echo "========================================="
        echo "Current Terraform State:"
        echo "========================================="
        terraform state list
        echo ""
        echo "========================================="
        echo "Import complete! Next steps:"
        echo "1. Run 'make cloud-deploy' to reconcile any differences"
        echo "2. Or run 'terraform plan' locally to review changes"
        echo "========================================="

timeout: '1200s'