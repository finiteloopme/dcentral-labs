#!/bin/bash
# Automatically configure gcloud in Cloud Workstations to use metadata service
# Note: This script may be sourced, so don't use exit

# Only show output if running interactively
VERBOSE=false
if [ -t 1 ]; then
    VERBOSE=true
fi

[ "$VERBOSE" = true ] && echo "=== Setting up gcloud authentication for Cloud Workstations ==="
[ "$VERBOSE" = true ] && echo ""

# Check if we're in a Cloud Workstation
if [ -z "$CLOUD_WORKSTATIONS_CONFIG" ] && [ -z "$GOOGLE_CLOUD_PROJECT" ]; then
    echo "Not running in a Cloud Workstation environment."
    echo "This script is for Cloud Workstations only."
    exit 0
fi

# Get project ID from metadata service
echo "Detecting project configuration from metadata..."
PROJECT_ID=""
PROJECT_NUMBER=""
SERVICE_ACCOUNT=""

# Try to get project ID from metadata
if curl -s -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/project/project-id" &>/dev/null; then
    PROJECT_ID=$(curl -s -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/project/project-id")
    echo "✓ Detected project ID: $PROJECT_ID"
fi

# Get project number
if curl -s -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/project/numeric-project-id" &>/dev/null; then
    PROJECT_NUMBER=$(curl -s -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/project/numeric-project-id")
    echo "✓ Detected project number: $PROJECT_NUMBER"
fi

# Get service account
if curl -s -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/email" &>/dev/null; then
    SERVICE_ACCOUNT=$(curl -s -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/email")
    echo "✓ Detected service account: $SERVICE_ACCOUNT"
fi

# Configure gcloud to use the detected project
if [ -n "$PROJECT_ID" ]; then
    echo ""
    echo "Configuring gcloud..."
    
    # Set the project
    gcloud config set project "$PROJECT_ID" --quiet 2>/dev/null || true
    
    # Set the account to use the metadata service account
    if [ -n "$SERVICE_ACCOUNT" ]; then
        gcloud config set account "$SERVICE_ACCOUNT" --quiet 2>/dev/null || true
    fi
    
    # Configure gcloud to use the metadata service for auth
    gcloud config set auth/disable_credentials false --quiet 2>/dev/null || true
    gcloud config set core/disable_prompts true --quiet 2>/dev/null || true
    
    # Export environment variables
    export GCP_PROJECT_ID="$PROJECT_ID"
    export GOOGLE_CLOUD_PROJECT="$PROJECT_ID"
    # Unset application credentials to force use of metadata service
    unset GOOGLE_APPLICATION_CREDENTIALS
    
    echo "✓ gcloud configured to use project: $PROJECT_ID"
else
    echo "⚠ Could not detect project ID from metadata"
    exit 1
fi

# Test the configuration
echo ""
echo "Testing authentication..."

# Test if we can list services (simple API call)
if gcloud services list --limit=1 --quiet &>/dev/null; then
    echo "✓ Authentication working via metadata service"
else
    echo "⚠ Authentication test failed"
    echo ""
    echo "This might mean the service account lacks permissions."
    echo "Please ensure the workstation service account has necessary IAM roles."
fi

# Test Vertex AI access specifically
echo ""
echo "Testing Vertex AI access..."
if gcloud ai models list --region=global --limit=1 --quiet &>/dev/null; then
    echo "✓ Vertex AI access confirmed"
    
    # Count available models
    MODEL_COUNT=$(gcloud ai models list --region=global --format="value(name)" 2>/dev/null | wc -l)
    echo "  Found $MODEL_COUNT AI models available"
else
    echo "⚠ Cannot access Vertex AI"
    echo ""
    echo "The service account may need the following IAM roles:"
    echo "  - roles/aiplatform.user"
    echo "  - roles/serviceusage.serviceUsageConsumer"
    echo ""
    echo "Current service account: $SERVICE_ACCOUNT"
fi

# Create/update a profile file that will be sourced on login
PROFILE_FILE="/etc/profile.d/gcloud-workstation.sh"
if [ -w "/etc/profile.d" ]; then
    cat > "$PROFILE_FILE" <<EOF
# Auto-generated by setup-gcloud-workstation.sh
# Configures gcloud to use metadata service in Cloud Workstations

export GCP_PROJECT_ID="$PROJECT_ID"
export GOOGLE_CLOUD_PROJECT="$PROJECT_ID"
# Unset application credentials to force use of metadata service
unset GOOGLE_APPLICATION_CREDENTIALS

# Ensure gcloud uses the right project
if [ -n "\$GCP_PROJECT_ID" ]; then
    gcloud config set project "\$GCP_PROJECT_ID" --quiet 2>/dev/null || true
fi
EOF
    echo ""
    echo "✓ Created persistent configuration at $PROFILE_FILE"
else
    # Fallback to user profile
    PROFILE_FILE="$HOME/.bashrc"
    cat >> "$PROFILE_FILE" <<EOF

# Auto-configured by setup-gcloud-workstation.sh
export GCP_PROJECT_ID="$PROJECT_ID"
export GOOGLE_CLOUD_PROJECT="$PROJECT_ID"
# Unset application credentials to force use of metadata service
unset GOOGLE_APPLICATION_CREDENTIALS
EOF
    echo ""
    echo "✓ Added configuration to $PROFILE_FILE"
fi

echo ""
echo "=== Setup Complete ==="
echo ""
echo "Configuration summary:"
echo "  Project ID: $PROJECT_ID"
echo "  Service Account: $SERVICE_ACCOUNT"
echo "  Auth Method: Metadata Service (automatic)"
echo ""
echo "You should now be able to use gcloud and Vertex AI without additional authentication."
echo ""
echo "To verify, run:"
echo "  gcloud config list"
echo "  gcloud ai models list --region=global --limit=5"
echo ""