# Default values for midnight-node.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1
# Node key configuration
key:
  # If true, a new node key will be generated
  generate: false
  # Existing node key (if generate is false)
  existingKey: "0000000000000000000000000000000000000000000000000000000000000001"
  # Secret name to store the node key (if generate is true)
  secretName: "midnight-node-key"
# Midnight Node Configuration
midnightNode:
  image:
    repository: midnightnetwork/midnight-node
    pullPolicy: IfNotPresent
    tag: "latest"
  ports:
    - name: websocket
      port: 9944
      targetPort: 9944
    - name: p2p
      port: 30333
      targetPort: 30333
    - name: prometheus
      port: 9615
      targetPort: 9615
  resources:
    requests:
      cpu: 500m
      memory: 4Gi
    limits:
      cpu: 4000m
      memory: 16Gi
  volumeMounts:
    - name: midnight-data
      mountPath: /data
    - name: chain-config
      mountPath: /pc-chain-config.json
      subPath: pc-chain-config.json
    - name: node-data
      mountPath: /node
  volumes:
    - name: midnight-data
      persistentVolumeClaim:
        claimName: midnight-data
    - name: chain-config
      configMap:
        name: chain-config
    - name: node-data
      persistentVolumeClaim:
        claimName: node-data
  environment:
    APPEND_ARGS: "--allow-private-ip --pool-limit 10 --trie-cache-size 0 --prometheus-external --rpc-external --rpc-cors all"
    BOOTNODES: "/dns/boot-node-01.testnet-02.midnight.network/tcp/30333/ws/p2p/12D3KooWMjUq13USCvQR9Y6yFzYNYgTQBLNAcmc8psAuPx2UUdnB /dns/boot-node-02.testnet-02.midnight.network/tcp/30333/ws/p2p/12D3KooWR1cHBUWPCqk3uqhwZqUFekfWj8T7ozK6S18DUT745v4d /dns/boot-node-03.testnet-02.midnight.network/tcp/30333/ws/p2p/12D3KooWQxxUgq7ndPfAaCFNbAxtcKYxrAzTxDfRGNktF75SxdX5"
    CFG_PRESET: "testnet-02"
    DB_SYNC_POSTGRES_CONNECTION_STRING: "postgresql://postgres:$(POSTGRES_PASSWORD)@midnight-node-postgres:5432/cexplorer"
  nodeKey: 959f7d509ef37faa8c48bcaae93a4a04ebcbf9e2fe677792e0ae3deb52bd3aed
# Cardano Node Configuration
cardanoNode:
  image:
    repository: ghcr.io/intersectmbo/cardano-node
    pullPolicy: IfNotPresent
    tag: "8.7.3"
  ports:
    - name: websocket
      port: 9944
      targetPort: 9944
    - name: p2p
      port: 30333
      targetPort: 30333
    - name: prometheus
      port: 9615
      targetPort: 9615
  resources:
    requests:
      cpu: 500m
      memory: 4Gi
    limits:
      cpu: 2000m
      memory: 16Gi
  volumeMounts:
    - name: midnight-data
      mountPath: /data
    - name: chain-config
      mountPath: /pc-chain-config.json
      subPath: pc-chain-config.json
    - name: node-data
      mountPath: /node
  volumes:
    - name: midnight-data
      persistentVolumeClaim:
        claimName: midnight-data
    - name: chain-config
      configMap:
        name: chain-config
    - name: node-data
      persistentVolumeClaim:
        claimName: node-data
  configDir: "/config"
  dataDir: "/data"
  environment:
    APPEND_ARGS: "--allow-private-ip --pool-limit 10 --trie-cache-size 0 --prometheus-external --rpc-external --rpc-cors all"
    BOOTNODES: "/dns/boot-node-01.testnet-02.midnight.network/tcp/30333/ws/p2p/12D3KooWMjUq13USCvQR9Y6yFzYNYgTQBLNAcmc8psAuPx2UUdnB /dns/boot-node-02.testnet-02.midnight.network/tcp/30333/ws/p2p/12D3KooWR1cHBUWPCqk3uqhwZqUFekfWj8T7ozK6S18DUT745v4d /dns/boot-node-03.testnet-02.midnight.network/tcp/30333/ws/p2p/12D3KooWQxxUgq7ndPfAaCFNbAxtcKYxrAzTxDfRGNktF75SxdX5"
    CFG_PRESET: "testnet-02"
    DB_SYNC_POSTGRES_CONNECTION_STRING: ""
# PostgreSQL Configuration
postgres:
  image:
    repository: postgres
    tag: "15.3"
    pullPolicy: IfNotPresent
  # Password generation configuration
  generatePassword: false
  secretName: "postgres-password"
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
  resources:
    requests:
      cpu: 250m
      memory: 500Mi
    limits:
      cpu: 500m
      memory: 2Gi
  volumeMounts:
    - name: postgres-data
      mountPath: /var/lib/postgresql/data
      subPath: pgdata
  volumes:
    - name: postgres-data
      persistentVolumeClaim:
        claimName: postgres-data
  environment:
    POSTGRES_PASSWORD: "password"
    POSTGRES_DB: "cexplorer"
    POSTGRES_USER: "postgres"
# Cardano DB Sync Configuration
dbSync:
  image:
    repository: ghcr.io/intersectmbo/cardano-db-sync
    tag: "13.2.0.0"
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 500m
      memory: 8Gi
    limits:
      cpu: 4000m
      memory: 32Gi
# Ogmios Configuration
ogmios:
  image:
    repository: cardanosolutions/ogmios
    tag: "v6.3.0"
    pullPolicy: IfNotPresent
  ports:
    - name: ogmios
      port: 1337
      targetPort: 1337
  resources:
    requests:
      cpu: 250m
      memory: 500Mi
    limits:
      cpu: 500m
      memory: 2Gi
  volumeMounts:
    - name: ogmios-data
      mountPath: /data
    - name: node-ipc
      mountPath: /ipc
# Proof Server Configuration
proofServer:
  image:
    repository: midnightnetwork/proof-server
    tag: "latest"
    pullPolicy: IfNotPresent
  ports:
    - name: proof-server
      port: 6300
      targetPort: 6300
  command:
    - "midnight-proof-server"
    - "--network"
    - "testnet"
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 4Gi
# Global Configuration
global:
  network: "preview"
  cardanoNodeSocketPath: "/ipc/node.socket"
  postgresHost: "midnight-duo-midnight-node-postgres"
  postgresPort: 5432
  postgresDb: "cexplorer"
  postgresUser: "postgres"
# Storage Configuration
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size:
    cardanoData: 100Gi
    postgresData: 50Gi
    dbSyncData: 50Gi
    ogmiosData: 10Gi
# Service Account Configuration
serviceAccount:
  create: true
  name: "midnight-node"
  annotations: {}
# Pod Security Context
podSecurityContext:
  fsGroup: 1000
# Container Security Context
securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  readOnlyRootFilesystem: false
# Network Policy
networkPolicy:
  enabled: false
  ingress:
    enabled: false
  egress:
    enabled: false
# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}
# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http
# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}
tolerations: []
affinity: {}
