import { NetworkId, EncryptionSecretKey } from '@midnight-ntwrk/zswap';
export type FormatContext = {
    networkId: string | null;
};
export declare class MidnightBech32m {
    readonly type: string;
    readonly network: string | null;
    readonly data: Buffer;
    static readonly prefix = "mn";
    static validateSegment(segmentName: string, segment: string): void;
    static parse(bech32string: string): MidnightBech32m;
    constructor(type: string, network: string | null, data: Buffer);
    asString(): string;
}
export declare class Bech32mCodec<T> {
    readonly type: string;
    readonly dataToBytes: (data: T) => Buffer;
    readonly dataFromBytes: (bytes: Buffer) => T;
    constructor(type: string, dataToBytes: (data: T) => Buffer, dataFromBytes: (bytes: Buffer) => T);
    encode(networkId: NetworkId, data: T): MidnightBech32m;
    decode(networkId: NetworkId | string | null, repr: MidnightBech32m): T;
    static createContext(networkId: NetworkId | string | null): FormatContext;
    static createContextFromZswap(networkId: NetworkId): FormatContext;
}
export declare class ShieldedAddress {
    readonly coinPublicKey: ShieldedCoinPublicKey;
    readonly encryptionPublicKey: ShieldedEncryptionPublicKey;
    static codec: Bech32mCodec<ShieldedAddress>;
    constructor(coinPublicKey: ShieldedCoinPublicKey, encryptionPublicKey: ShieldedEncryptionPublicKey);
    coinPublicKeyString(): string;
    encryptionPublicKeyString(): string;
}
export declare class ShieldedEncryptionSecretKey {
    readonly zswap: EncryptionSecretKey;
    static codec: Bech32mCodec<ShieldedEncryptionSecretKey>;
    constructor(zswap: EncryptionSecretKey);
}
export declare class ShieldedCoinPublicKey {
    readonly data: Buffer;
    static readonly key_length = 32;
    static codec: Bech32mCodec<ShieldedCoinPublicKey>;
    constructor(data: Buffer);
}
export declare class ShieldedEncryptionPublicKey {
    readonly data: Buffer;
    static readonly key_length = 32;
    static codec: Bech32mCodec<ShieldedEncryptionPublicKey>;
    constructor(data: Buffer);
}
//# sourceMappingURL=index.d.ts.map