import type { CoinInfo, EncPublicKey, Nullifier, QualifiedCoinInfo, Transaction, UnprovenTransaction } from '@midnight-ntwrk/zswap';
/**
 * Concatenated Hex-encoded byte string
 *
 * @remarks
 * CoinPublicKey (32 byte hex string), EncryptionPublicKey (35 byte hex string) concatenated by "|"
 */
export type AddressLegacy = string;
/**
 * Bech32m encoded address
 *
 */
export type Address = string;
/**
 *  35 byte hex string
 */
export type EncPublicKeyLegacy = string;
/**
 * Hex-encoded 32-byte byte string
 *
 * @remarks
 * A coin public key is a public key used to identify the wallet.
 */
export type CoinPublicKeyLegacy = string;
/**
 * Bech32m encoded CoinPublicKey
 */
export type CoinPublicKey = string;
/**
 * Hex-encoded 35-byte byte string
 *
 * @remarks
 * Token type is a unique identifier of a native token, which is used to distinguish native tokens in the network.
 * "tDUST" is a specific, well-know native token type.
 */
export type TokenType = string;
/**
 * Hex-encoded 32-byte bytes string
 *
 * @remarks
 * A transaction hash is a unique identifier of a transaction, which is used to distinguish it in the network.
 */
export type TransactionHash = string;
/**
 * Hex-encoded 32-byte byte string
 *
 * @remarks
 * The transaction identifier is used to index merged transactions.
 */
export type TransactionIdentifier = string;
/**
 * The status of the transaction
 *
 * @remarks
 * - FailEntirely - transaction failed and no part of it was applied
 * - FailFallible - the fallible part of the transaction failed, but the guaranteed part succeeded
 * - SucceedEntirely - transaction succeeded
 */
export type ApplyStage = 'FailEntirely' | 'FailFallible' | 'SucceedEntirely';
/**
 * Proving recipe identifier type for TransactionToProve
 *
 */
export declare const TRANSACTION_TO_PROVE = "TransactionToProve";
/**
 * Proving recipe identifier type for BalanceTransactionToProve
 */
export declare const BALANCE_TRANSACTION_TO_PROVE = "BalanceTransactionToProve";
/**
 * Proving recipe identifier type for NothingToProve
 */
export declare const NOTHING_TO_PROVE = "NothingToProve";
/**
 * Transaction data for proving
 *
 * @remarks
 * TransactionToProve is a data structure used for proving the unproven transaction.
 */
export type TransactionToProve = {
    /**
     * Used to identify the transaction type
     */
    readonly type: typeof TRANSACTION_TO_PROVE;
    /**
     * Unproven transaction which needs to be proven.
     */
    readonly transaction: UnprovenTransaction;
};
/**
 * Balance transaction data for proving
 *
 * @remarks
 * BalanceTransactionToProve is a data structure used for proving the unproven transaction (transactionToProve)
 * and merging it with the original transaction (transactionToBalance)
 */
export type BalanceTransactionToProve = {
    /**
     * Used to identify the transaction type
     */
    readonly type: typeof BALANCE_TRANSACTION_TO_PROVE;
    /**
     * Unproven transaction which needs to be proven.
     * Transaction which will balance the `transactionToBalance`
     */
    readonly transactionToProve: UnprovenTransaction;
    /**
     * Transaction which will be merged with proved `transactionToProve`.
     * It is a original transaction which we want to balance.
     */
    readonly transactionToBalance: Transaction;
};
/**
 * No-Op transaction data for proving
 *
 * @remarks
 * balanceTransaction API allows passing already balanced and proved transaction.
 *
 * NothingToProve is designed to mark this special case and can be passed further to proveTransaction endpoint
 * without a risk of executing unnecessary proving process,
 * and without disturbing transaction flow with supporting special cases
 */
export type NothingToProve = {
    /**
     * Used to identify the transaction type
     */
    readonly type: typeof NOTHING_TO_PROVE;
    /**
     * Original transaction
     */
    readonly transaction: Transaction;
};
/**
 * Transaction data used for proving
 *
 * @remarks
 * ProvingRecipe is a data structure used for proving the unproven transaction, balancing, and proving a transaction
 * or declaring a recipe that has no transaction to prove
 */
export type ProvingRecipe = TransactionToProve | BalanceTransactionToProve | NothingToProve;
/**
 * Data for transferring tokens
 *
 */
export type TokenTransfer = {
    /**
     * Amount of transferred tokens
     *
     * @remarks
     * It is a non-negative integer, which represents the amount of tokens to be transferred. The smallest unit that can be transferred is 1.
     */
    readonly amount: bigint;
    /**
     * {@link TokenType} of transferred token
     *
     */
    readonly type: TokenType;
    /**
     * {@link Address} of receiver
     */
    readonly receiverAddress: Address;
};
/**
 * Transaction history data
 */
export type TransactionHistoryEntry = {
    /**
     * {@link TransactionHash} of the transaction
     */
    readonly transactionHash: TransactionHash;
    /**
     * An array of {@link TransactionIdentifier} of the transaction.
     */
    readonly identifiers: TransactionIdentifier[];
    /**
     * The value of this offer for each token type
     *
     * @remarks
     * It contains the input coin values - output coin values, for value vectors of the transaction.
     * Note that this will not list any zero value coins;
     */
    readonly deltas: Record<TokenType, bigint>;
    /**
     * Original transaction
     */
    readonly transaction: Transaction;
    /**
     * {@link ApplyStage} of the transaction
     */
    readonly applyStage: ApplyStage;
};
/**
 * Lag of the wallet syncing process.
 */
export type SyncLag = {
    /**
     * Blocks the backend still needs to process, if this is greater than 0, it means that the backend is not fully synced
     * Formula: chain tip - backend tip
     */
    readonly sourceGap: bigint;
    /**
     * Blocks your wallet still needs to process, if this is greater than 0, it means that your wallet is not fully synced
     * Formula: backend tip - last transaction index processed by your wallet
     */
    readonly applyGap: bigint;
};
/**
 * Sync progress of the wallet
 */
export type SyncProgress = {
    lag: SyncLag;
    /**
     * SyncLag.indexer === 0 && SyncLag.wallet === 0
     */
    synced: boolean;
};
/**
 * Wallet state information
 *
 * @remarks
 * WalletState is a data structure used for storing wallet state information, such as wallet coins, balances, transaction history, etc.
 */
export type WalletState = {
    /**
     * All wallet coins (including those which are pending to spend)
     */
    readonly coins: QualifiedCoinInfo[];
    /**
     * Nullifiers corresponding to the coins.
     * For `0 <= i < coins.length`,  nullifiers[i] corresponds to coins[i]
     */
    readonly nullifiers: Nullifier[];
    /**
     * All available wallet coins that can be spent immediately.
     */
    readonly availableCoins: QualifiedCoinInfo[];
    /**
     * The coins the wallet is expecting to receive in the future, but which are not yet available for spending
     */
    readonly pendingCoins: CoinInfo[];
    /**
     * A map of balances for all available coins, where the key is a {@link TokenType} and the value is a balance.
     * Note that this won't list any zero balance coins
     */
    readonly balances: Record<TokenType, bigint>;
    /**
     * Wallet {@link CoinPublicKey}
     */
    readonly coinPublicKey: CoinPublicKey;
    /**
     * Wallet {@link CoinPublicKeyLegacy}
     */
    readonly coinPublicKeyLegacy: CoinPublicKeyLegacy;
    /**
     * Wallet EncryptionPublicKey
     */
    readonly encryptionPublicKey: EncPublicKey;
    /**
     * Wallet {@link EncPublicKeyLegacy}
     */
    readonly encryptionPublicKeyLegacy: EncPublicKeyLegacy;
    /**
     * Wallet {@link Address | address}
     */
    readonly address: Address;
    /**
     * Wallet {@link AddressLegacy | address}
     */
    readonly addressLegacy: AddressLegacy;
    /**
     * Transaction history - an array of {@link TransactionHistoryEntry} sorted from the oldest one to the newest one.
     */
    readonly transactionHistory: TransactionHistoryEntry[];
    /**
     * {@link SyncProgress} of the wallet
     *
     * It can be undefined when wallet is started and if it is not syncing
     */
    readonly syncProgress: SyncProgress | undefined;
};
//# sourceMappingURL=index.d.ts.map