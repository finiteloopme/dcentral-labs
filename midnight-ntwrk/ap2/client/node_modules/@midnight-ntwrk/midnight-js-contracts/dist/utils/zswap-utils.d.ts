import type { ContractAddress, ZswapChainState, CoinInfo, QualifiedCoinInfo, CoinPublicKey, EncPublicKey } from '@midnight-ntwrk/ledger';
import { UnprovenOffer, UnprovenOutput, UnprovenTransient, UnprovenInput } from '@midnight-ntwrk/ledger';
import { type Recipient, type ZswapLocalState } from '@midnight-ntwrk/compact-runtime';
export declare const checkKeys: (coinInfo: CoinInfo) => void;
export declare const serializeCoinInfo: (coinInfo: CoinInfo) => string;
export declare const serializeQualifiedCoinInfo: (coinInfo: QualifiedCoinInfo) => string;
export declare const deserializeCoinInfo: (coinInfo: string) => CoinInfo;
export declare const createUnprovenOutput: ({ coinInfo, recipient }: {
    coinInfo: CoinInfo;
    recipient: Recipient;
}, encryptionPublicKey: EncPublicKey, segmentNumber?: number) => UnprovenOutput;
export declare const unprovenOfferFromMap: <U extends UnprovenInput | UnprovenOutput | UnprovenTransient>(map: Map<string, U>, f: (u: U, type: string, value: bigint) => UnprovenOffer) => UnprovenOffer;
export declare const zswapStateToOffer: (zswapLocalState: ZswapLocalState, encryptionPublicKey: EncPublicKey, params?: {
    contractAddress: ContractAddress;
    zswapChainState: ZswapChainState;
}) => UnprovenOffer;
export declare const zswapStateToNewCoins: (receiverCoinPublicKey: CoinPublicKey, zswapState: ZswapLocalState) => CoinInfo[];
export declare const encryptionPublicKeyForzswapState: (zswapState: ZswapLocalState, walletCoinPublicKey: CoinPublicKey, walletEncryptionPublicKey: EncPublicKey) => EncPublicKey;
//# sourceMappingURL=zswap-utils.d.ts.map