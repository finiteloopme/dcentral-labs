import { ContractState, type ZswapLocalState, type ContractAddress, type AlignedValue, type SigningKey, type QueryContext } from '@midnight-ntwrk/compact-runtime';
import { ContractMaintenanceAuthority, ContractState as LedgerContractState, QueryContext as LedgerQueryContext, ReplaceAuthority, VerifierKeyRemove, VerifierKeyInsert } from '@midnight-ntwrk/ledger';
import type { ZswapChainState, SingleUpdate } from '@midnight-ntwrk/ledger';
import { type ImpureCircuitId, UnprovenTransaction, type VerifierKey } from '@midnight-ntwrk/midnight-js-types';
import { type EncPublicKey } from '@midnight-ntwrk/zswap';
import type { PartitionedTranscript } from '../call';
export declare const toLedgerContractState: (contractState: ContractState) => LedgerContractState;
export declare const fromLedgerContractState: (contractState: LedgerContractState) => ContractState;
export declare const toLedgerQueryContext: (queryContext: QueryContext) => LedgerQueryContext;
export declare const contractMaintenanceAuthority: (sk: SigningKey, contractState?: ContractState) => ContractMaintenanceAuthority;
export declare const createUnprovenLedgerDeployTx: (verifierKeys: [ImpureCircuitId, VerifierKey][], sk: SigningKey, contractState: ContractState, zswapLocalState: ZswapLocalState, encryptionPublicKey: EncPublicKey) => [ContractAddress, ContractState, UnprovenTransaction];
export declare const createUnprovenLedgerCallTx: (circuitId: ImpureCircuitId, contractAddress: ContractAddress, initialContractState: ContractState, zswapChainState: ZswapChainState, partitionedTranscript: PartitionedTranscript, privateTranscriptOutputs: AlignedValue[], input: AlignedValue, output: AlignedValue, nextZswapLocalState: ZswapLocalState, encryptionPublicKey: EncPublicKey) => UnprovenTransaction;
export declare const replaceAuthority: (newAuthority: SigningKey, contractState: ContractState) => ReplaceAuthority;
export declare const removeVerifierKey: (operation: string | Uint8Array) => VerifierKeyRemove;
export declare const insertVerifierKey: (operation: string | Uint8Array, newVk: VerifierKey) => VerifierKeyInsert;
export declare const unprovenTxFromContractUpdates: (contractAddress: ContractAddress, updates: SingleUpdate[], contractState: ContractState, sk: SigningKey) => UnprovenTransaction;
export declare const createUnprovenReplaceAuthorityTx: (contractAddress: ContractAddress, newAuthority: SigningKey, contractState: ContractState, currentAuthority: SigningKey) => UnprovenTransaction;
export declare const createUnprovenRemoveVerifierKeyTx: (contractAddress: ContractAddress, operation: string | Uint8Array, contractState: ContractState, currentAuthority: SigningKey) => UnprovenTransaction;
export declare const createUnprovenInsertVerifierKeyTx: (contractAddress: ContractAddress, operation: string | Uint8Array, newVk: VerifierKey, contractState: ContractState, currentAuthority: SigningKey) => UnprovenTransaction;
//# sourceMappingURL=ledger-utils.d.ts.map