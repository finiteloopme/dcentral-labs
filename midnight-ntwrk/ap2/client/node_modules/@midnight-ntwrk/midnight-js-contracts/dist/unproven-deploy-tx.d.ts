import { type VerifierKey, type PrivateStateId, type PrivateState, type Contract, type ImpureCircuitId } from '@midnight-ntwrk/midnight-js-types';
import type { SigningKey, CoinPublicKey } from '@midnight-ntwrk/compact-runtime';
import type { EncPublicKey } from '@midnight-ntwrk/zswap';
import type { UnsubmittedDeployTxData } from './tx-model';
import type { ContractConstructorOptionsWithArguments } from './call-constructor';
import { type ContractProviders } from './contract-providers';
/**
 * Base type for deploy transaction configuration.
 */
export type DeployTxOptionsBase<C extends Contract> = ContractConstructorOptionsWithArguments<C> & {
    /**
     * The signing key to add as the to-be-deployed contract's maintenance authority.
     */
    readonly signingKey: SigningKey;
};
/**
 * Configuration for creating deploy transactions for contracts with private state. This
 * configuration used as a base type for the {@link DeployTxOptionsWithPrivateStateId} configuration.
 * It is also used directly as parameter to {@link createUnprovenDeployTx} which doesn't need
 * to save private state (and therefore doesn't need a private state ID) but does need to supply an
 * initial private state to run the contract constructor against.
 */
export type DeployTxOptionsWithPrivateState<C extends Contract> = DeployTxOptionsBase<C> & {
    /**
     * The private state to run the contract constructor against.
     */
    readonly initialPrivateState: PrivateState<C>;
};
/**
 * Configuration for creating deploy transactions for contracts with private state. This
 * configuration is used when a deployment transaction is created and an initial private
 * state needs to be stored, as is the case in {@link submitDeployTx}.
 */
export type DeployTxOptionsWithPrivateStateId<C extends Contract> = DeployTxOptionsWithPrivateState<C> & {
    /**
     * The identifier for the private state of the contract.
     */
    readonly privateStateId: PrivateStateId;
};
/**
 * Configuration for creating unproven deploy transactions.
 */
export type UnprovenDeployTxOptions<C extends Contract> = DeployTxOptionsBase<C> | DeployTxOptionsWithPrivateState<C>;
export declare function createUnprovenDeployTxFromVerifierKeys<C extends Contract<undefined>>(verifierKeys: [ImpureCircuitId<C>, VerifierKey][], coinPublicKey: CoinPublicKey, options: DeployTxOptionsBase<C>, encryptionPublicKey: EncPublicKey): UnsubmittedDeployTxData<C>;
export declare function createUnprovenDeployTxFromVerifierKeys<C extends Contract>(verifierKeys: [ImpureCircuitId<C>, VerifierKey][], coinPublicKey: CoinPublicKey, options: DeployTxOptionsWithPrivateState<C>, encryptionPublicKey: EncPublicKey): UnsubmittedDeployTxData<C>;
/**
 * Providers needed to create an unproven deployment transactions, just the ZK artifact
 * provider and a wallet.
 */
export type UnprovenDeployTxProviders<C extends Contract> = Pick<ContractProviders<C>, 'zkConfigProvider' | 'walletProvider'>;
export declare function createUnprovenDeployTx<C extends Contract<undefined>>(providers: UnprovenDeployTxProviders<C>, options: DeployTxOptionsBase<C>): Promise<UnsubmittedDeployTxData<C>>;
export declare function createUnprovenDeployTx<C extends Contract>(providers: UnprovenDeployTxProviders<C>, options: DeployTxOptionsWithPrivateState<C>): Promise<UnsubmittedDeployTxData<C>>;
//# sourceMappingURL=unproven-deploy-tx.d.ts.map