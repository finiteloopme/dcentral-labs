import type { ProverKey, VerifierKey, ZKIR, ZKConfig } from './midnight-types';
/**
 * A provider for zero-knowledge intermediate representations, prover keys, and verifier keys. All
 * three are used by the {@link ProofProvider} to create a proof for a call transaction. The implementation
 * of this provider depends on the runtime environment, since each environment has different conventions
 * for accessing static artifacts.
 * @typeParam K - The type of the circuit ID used by the provider.
 */
export declare abstract class ZKConfigProvider<K extends string> {
    /**
     * Retrieves the zero-knowledge intermediate representation produced by `compactc` for the given circuit.
     * @param circuitId The circuit ID of the ZKIR to retrieve.
     */
    abstract getZKIR(circuitId: K): Promise<ZKIR>;
    /**
     * Retrieves the prover key produced by `compactc` for the given circuit.
     * @param circuitId The circuit ID of the prover key to retrieve.
     */
    abstract getProverKey(circuitId: K): Promise<ProverKey>;
    /**
     * Retrieves the verifier key produced by `compactc` for the given circuit.
     * @param circuitId The circuit ID of the verifier key to retrieve.
     */
    abstract getVerifierKey(circuitId: K): Promise<VerifierKey>;
    /**
     * Retrieves the verifier keys produced by `compactc` for the given circuits.
     * @param circuitIds The circuit IDs of the verifier keys to retrieve.
     */
    getVerifierKeys(circuitIds: K[]): Promise<[K, VerifierKey][]>;
    /**
     * Retrieves all zero-knowledge artifacts produced by `compactc` for the given circuit.
     * @param circuitId The circuit ID of the artifacts to retrieve.
     */
    get(circuitId: K): Promise<ZKConfig<K>>;
}
//# sourceMappingURL=zk-config-provider.d.ts.map