import { type FinalizedTxData, type VerifierKey, type CircuitParameters, type Contract, type PrivateStateId, type ImpureCircuitId } from '@midnight-ntwrk/midnight-js-types';
import type { ContractAddress } from '@midnight-ntwrk/ledger';
import type { SigningKey } from '@midnight-ntwrk/compact-runtime';
import type { FinalizedCallTxData } from './tx-model';
import type { CallTxOptions } from './unproven-call-tx';
import { type ContractProviders } from './contract-providers';
/**
 * A type that lifts each circuit defined in a contract to a function that builds
 * and submits a call transaction.
 */
export type CircuitCallTxInterface<C extends Contract> = {
    [ICK in ImpureCircuitId<C>]: (...args: CircuitParameters<C, ICK>) => Promise<FinalizedCallTxData<C, ICK>>;
};
/**
 * Creates a {@link CallTxOptions} object from various data.
 */
export declare const createCallTxOptions: <C extends Contract, ICK extends ImpureCircuitId<C>>(contract: C, circuitId: ICK, contractAddress: ContractAddress, privateStateId: PrivateStateId | undefined, args: CircuitParameters<C, ICK>) => CallTxOptions<C, ICK>;
/**
 * Creates a circuit call transaction interface for a contract.
 *
 * @param providers The providers to use to build transactions.
 * @param contract The contract to use to execute circuits.
 * @param contractAddress The ledger address of the contract.
 * @param privateStateId The identifier of the state of the witnesses of the contract.
 */
export declare const createCircuitCallTxInterface: <C extends Contract>(providers: ContractProviders<C>, contract: C, contractAddress: ContractAddress, privateStateId: PrivateStateId | undefined) => CircuitCallTxInterface<C>;
/**
 * An interface for creating maintenance transactions for a specific circuit defined in a
 * given contract.
 */
export type CircuitMaintenanceTxInterface = {
    /**
     * Constructs and submits a transaction that removes the current verifier key stored
     * on the blockchain for this circuit at this contract's address.
     */
    removeVerifierKey(): Promise<FinalizedTxData>;
    /**
     * Constructs and submits a transaction that adds a new verifier key to the
     * blockchain for this circuit at this contract's address.
     *
     * @param newVk The new verifier key to add for this circuit.
     */
    insertVerifierKey(newVk: VerifierKey): Promise<FinalizedTxData>;
};
/**
 * Creates a {@link CircuitMaintenanceTxInterface}.
 *
 * @param providers The providers to use to create and submit transactions.
 * @param circuitId The circuit ID the interface is for.
 * @param contractAddress The address of the deployed contract for which this
 *                        interface is being created.
 */
export declare const createCircuitMaintenanceTxInterface: <C extends Contract, ICK extends ImpureCircuitId<C>>(providers: ContractProviders<C, ICK>, circuitId: ICK, contractAddress: ContractAddress) => CircuitMaintenanceTxInterface;
/**
 * A set of maintenance transaction creation interfaces, one for each circuit defined in
 * a given contract, keyed by the circuit name.
 */
export type CircuitMaintenanceTxInterfaces<C extends Contract> = {
    [ICK in ImpureCircuitId<C>]: CircuitMaintenanceTxInterface;
};
/**
 * Creates a {@link CircuitMaintenanceTxInterfaces}.
 *
 * @param providers The providers to use to build transactions.
 * @param contract The contract to use to execute circuits.
 * @param contractAddress The ledger address of the contract.
 */
export declare const createCircuitMaintenanceTxInterfaces: <C extends Contract>(providers: ContractProviders<C>, contract: C, contractAddress: ContractAddress) => CircuitMaintenanceTxInterfaces<C>;
/**
 * Interface for creating maintenance transactions for a contract that was
 * deployed.
 */
export type ContractMaintenanceTxInterface = {
    /**
     * Constructs and submits a transaction that replaces the maintenance
     * authority stored on the blockchain for this contract.
     *
     * @param newAuthority The new contract maintenance authority for this contract.
     */
    replaceAuthority(newAuthority: SigningKey): Promise<FinalizedTxData>;
};
/**
 * Creates a {@link ContractMaintenanceTxInterface}.
 *
 * @param providers The providers to use to build transactions.
 * @param contractAddress The ledger address of the contract.
 */
export declare const createContractMaintenanceTxInterface: (providers: ContractProviders, contractAddress: ContractAddress) => ContractMaintenanceTxInterface;
//# sourceMappingURL=tx-interfaces.d.ts.map