import { type CoinPublicKey, type ContractState, type ZswapLocalState } from '@midnight-ntwrk/compact-runtime';
import type { Contract, InitialStateParameters, PrivateState } from '@midnight-ntwrk/midnight-js-types';
/**
 * Describes the target of a circuit invocation.
 */
export type ContractConstructorOptionsBase<C extends Contract> = {
    /**
     * The contract defining the circuit to call.
     */
    readonly contract: C;
};
/**
 * Conditional type that optionally adds the inferred contract constructor argument types
 * to the constructor options.
 */
export type ContractConstructorOptionsWithArguments<C extends Contract> = InitialStateParameters<C> extends [] ? ContractConstructorOptionsBase<C> : ContractConstructorOptionsBase<C> & {
    /**
     * Arguments to pass to the circuit being called.
     */
    readonly args: InitialStateParameters<C>;
};
/**
 * Data retrieved via providers that should be included in the constructor call options.
 */
export type ContractConstructorOptionsProviderDataDependencies = {
    /**
     * The current user's ZSwap public key.
     */
    readonly coinPublicKey: CoinPublicKey;
};
/**
 * Contract constructor options including arguments and provider data.
 */
export type ContractConstructorOptionsWithProviderDataDependencies<C extends Contract> = ContractConstructorOptionsWithArguments<C> & ContractConstructorOptionsProviderDataDependencies;
/**
 * Conditional type that optionally adds the inferred circuit argument types to
 * the target of a circuit invocation.
 */
export type ContractConstructorOptionsWithPrivateState<C extends Contract> = ContractConstructorOptionsWithProviderDataDependencies<C> & {
    /**
     * The private state to run the circuit against.
     */
    readonly initialPrivateState: PrivateState<C>;
};
/**
 * Conditional type that optionally adds the inferred circuit argument types to
 * the target of a circuit invocation.
 */
export type ContractConstructorOptions<C extends Contract> = ContractConstructorOptionsWithProviderDataDependencies<C> | ContractConstructorOptionsWithPrivateState<C>;
/**
 * The updated states resulting from executing a contract constructor.
 */
export type ContractConstructorResult<C extends Contract> = {
    /**
     * The public state resulting from executing the contract constructor.
     */
    readonly nextContractState: ContractState;
    /**
     * The private state resulting from executing the contract constructor.
     */
    readonly nextPrivateState: PrivateState<C>;
    /**
     * The Zswap local state resulting from executing the contract constructor.
     */
    readonly nextZswapLocalState: ZswapLocalState;
};
/**
 * Calls the constructor of the given contract according to the given configuration.
 *
 * @param options Configuration.
 */
export declare const callContractConstructor: <C extends Contract>(options: ContractConstructorOptions<C>) => ContractConstructorResult<C>;
//# sourceMappingURL=call-constructor.d.ts.map