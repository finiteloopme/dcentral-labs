import * as ledger from '@midnight-ntwrk/ledger';
import * as runtime from '@midnight-ntwrk/compact-runtime';
import * as zswap from '@midnight-ntwrk/zswap';
import { NetworkId } from './network-id';
/**
 * Sets the global network identifier.
 *
 * @param id A valid {@link NetworkId} value.
 */
export declare const setNetworkId: (id: NetworkId) => void;
/**
 * Retrieves the currently set global network identifier.
 *
 * @returns The currently set {@link NetworkId}.
 */
export declare const getNetworkId: () => NetworkId;
/**
 * Retrieves the currently set global network identifier as a {@link runtime.NetworkId} value.
 *
 * @returns The currently set {@link runtime.NetworkId}.
 */
export declare const getRuntimeNetworkId: () => runtime.NetworkId;
/**
 * Retrieves the currently set global network identifier as a {@link ledger.NetworkId} value.
 *
 * @returns The currently set {@link ledger.NetworkId}.
 */
export declare const getLedgerNetworkId: () => ledger.NetworkId;
/**
 * Retrieves the currently set global network identifier as a {@link zswap.NetworkId} value.
 *
 * @returns The currently set {@link zswap.NetworkId}.
 */
export declare const getZswapNetworkId: () => zswap.NetworkId;
/**
 * Converts a potential network ID into a {@link NetworkId}. Returns null if the string is not
 * a valid network ID.
 *
 * @param networkId The string to convert.
 */
export declare const stringToNetworkId: (networkId: string) => NetworkId | null;
/**
 * Converts a network ID to hex representation. Used for debugging.
 *
 * @param networkId The network ID to convert to hex.
 */
export declare const networkIdToHex: (networkId: NetworkId) => string;
export * from './network-id';
export * from './errors';
//# sourceMappingURL=index.d.ts.map