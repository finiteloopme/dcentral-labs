import * as ledger from '@midnight-ntwrk/ledger';
import * as runtime from '@midnight-ntwrk/compact-runtime';
import * as zswap from '@midnight-ntwrk/zswap';

/**
 * A valid named Midnight network identifier.
 */
var NetworkId;
(function (NetworkId) {
    /**
     * Indicates a local test network is being used.
     */
    NetworkId["Undeployed"] = "Undeployed";
    /**
     * Indicates the official Midnight developer network is being used.
     */
    NetworkId["DevNet"] = "DevNet";
    /**
     * Indicates the official Midnight test network is being used.
     */
    NetworkId["TestNet"] = "TestNet";
    /**
     * Indicates the official, main, Midnight network is being used.
     */
    NetworkId["MainNet"] = "MainNet";
})(NetworkId || (NetworkId = {}));

/**
 * An error indicating an unexpected network identifier.
 */
class NetworkIdTypeError extends TypeError {
    networkId;
    /**
     * @param networkId A string representation of the invalid network identifier.
     */
    constructor(networkId) {
        super(`Invalid network ID: '${networkId}'. Must be one of: ${Object.values(NetworkId).join(', ')}`);
        this.networkId = networkId;
    }
}

const toLedgerNetworkId = (id) => {
    switch (id) {
        case NetworkId.Undeployed:
            return ledger.NetworkId.Undeployed;
        case NetworkId.DevNet:
            return ledger.NetworkId.DevNet;
        case NetworkId.TestNet:
            return ledger.NetworkId.TestNet;
        case NetworkId.MainNet:
            return ledger.NetworkId.MainNet;
        default:
            throw new NetworkIdTypeError(String(id));
    }
};
const toRuntimeNetworkId = (id) => {
    switch (id) {
        case NetworkId.Undeployed:
            return runtime.NetworkId.Undeployed;
        case NetworkId.DevNet:
            return runtime.NetworkId.DevNet;
        case NetworkId.TestNet:
            return runtime.NetworkId.TestNet;
        case NetworkId.MainNet:
            return runtime.NetworkId.MainNet;
        default:
            throw new NetworkIdTypeError(String(id));
    }
};
const toZswapNetworkId = (id) => {
    switch (id) {
        case NetworkId.Undeployed:
            return zswap.NetworkId.Undeployed;
        case NetworkId.DevNet:
            return zswap.NetworkId.DevNet;
        case NetworkId.TestNet:
            return zswap.NetworkId.TestNet;
        case NetworkId.MainNet:
            return zswap.NetworkId.MainNet;
        default:
            throw new NetworkIdTypeError(String(id));
    }
};
// Module level state that will be preserved by the JavaScript module system.
let currentNetworkId = NetworkId.Undeployed;
/**
 * Sets the global network identifier.
 *
 * @param id A valid {@link NetworkId} value.
 */
const setNetworkId = (id) => {
    currentNetworkId = id;
};
/**
 * Retrieves the currently set global network identifier.
 *
 * @returns The currently set {@link NetworkId}.
 */
const getNetworkId = () => currentNetworkId;
/**
 * Retrieves the currently set global network identifier as a {@link runtime.NetworkId} value.
 *
 * @returns The currently set {@link runtime.NetworkId}.
 */
const getRuntimeNetworkId = () => toRuntimeNetworkId(getNetworkId());
/**
 * Retrieves the currently set global network identifier as a {@link ledger.NetworkId} value.
 *
 * @returns The currently set {@link ledger.NetworkId}.
 */
const getLedgerNetworkId = () => toLedgerNetworkId(getNetworkId());
/**
 * Retrieves the currently set global network identifier as a {@link zswap.NetworkId} value.
 *
 * @returns The currently set {@link zswap.NetworkId}.
 */
const getZswapNetworkId = () => toZswapNetworkId(getNetworkId());
/**
 * Converts a potential network ID into a {@link NetworkId}. Returns null if the string is not
 * a valid network ID.
 *
 * @param networkId The string to convert.
 */
const stringToNetworkId = (networkId) => {
    switch (networkId) {
        case 'Undeployed':
            return NetworkId.Undeployed;
        case 'DevNet':
            return NetworkId.DevNet;
        case 'TestNet':
            return NetworkId.TestNet;
        case 'MainNet':
            return NetworkId.MainNet;
        default:
            return null;
    }
};
/**
 * Converts a network ID to hex representation. Used for debugging.
 *
 * @param networkId The network ID to convert to hex.
 */
const networkIdToHex = (networkId) => {
    switch (networkId) {
        case NetworkId.Undeployed:
            return '00';
        case NetworkId.DevNet:
            return '01';
        case NetworkId.TestNet:
            return '02';
        case NetworkId.MainNet:
            return '04';
        default:
            throw new NetworkIdTypeError(String(networkId));
    }
};

export { NetworkId, NetworkIdTypeError, getLedgerNetworkId, getNetworkId, getRuntimeNetworkId, getZswapNetworkId, networkIdToHex, setNetworkId, stringToNetworkId };
//# sourceMappingURL=index.mjs.map
