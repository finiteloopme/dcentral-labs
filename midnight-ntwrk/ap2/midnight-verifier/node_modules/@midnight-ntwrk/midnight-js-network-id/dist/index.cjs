'use strict';

var ledger = require('@midnight-ntwrk/ledger');
var runtime = require('@midnight-ntwrk/compact-runtime');
var zswap = require('@midnight-ntwrk/zswap');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var ledger__namespace = /*#__PURE__*/_interopNamespaceDefault(ledger);
var runtime__namespace = /*#__PURE__*/_interopNamespaceDefault(runtime);
var zswap__namespace = /*#__PURE__*/_interopNamespaceDefault(zswap);

/**
 * A valid named Midnight network identifier.
 */
exports.NetworkId = void 0;
(function (NetworkId) {
    /**
     * Indicates a local test network is being used.
     */
    NetworkId["Undeployed"] = "Undeployed";
    /**
     * Indicates the official Midnight developer network is being used.
     */
    NetworkId["DevNet"] = "DevNet";
    /**
     * Indicates the official Midnight test network is being used.
     */
    NetworkId["TestNet"] = "TestNet";
    /**
     * Indicates the official, main, Midnight network is being used.
     */
    NetworkId["MainNet"] = "MainNet";
})(exports.NetworkId || (exports.NetworkId = {}));

/**
 * An error indicating an unexpected network identifier.
 */
class NetworkIdTypeError extends TypeError {
    networkId;
    /**
     * @param networkId A string representation of the invalid network identifier.
     */
    constructor(networkId) {
        super(`Invalid network ID: '${networkId}'. Must be one of: ${Object.values(exports.NetworkId).join(', ')}`);
        this.networkId = networkId;
    }
}

const toLedgerNetworkId = (id) => {
    switch (id) {
        case exports.NetworkId.Undeployed:
            return ledger__namespace.NetworkId.Undeployed;
        case exports.NetworkId.DevNet:
            return ledger__namespace.NetworkId.DevNet;
        case exports.NetworkId.TestNet:
            return ledger__namespace.NetworkId.TestNet;
        case exports.NetworkId.MainNet:
            return ledger__namespace.NetworkId.MainNet;
        default:
            throw new NetworkIdTypeError(String(id));
    }
};
const toRuntimeNetworkId = (id) => {
    switch (id) {
        case exports.NetworkId.Undeployed:
            return runtime__namespace.NetworkId.Undeployed;
        case exports.NetworkId.DevNet:
            return runtime__namespace.NetworkId.DevNet;
        case exports.NetworkId.TestNet:
            return runtime__namespace.NetworkId.TestNet;
        case exports.NetworkId.MainNet:
            return runtime__namespace.NetworkId.MainNet;
        default:
            throw new NetworkIdTypeError(String(id));
    }
};
const toZswapNetworkId = (id) => {
    switch (id) {
        case exports.NetworkId.Undeployed:
            return zswap__namespace.NetworkId.Undeployed;
        case exports.NetworkId.DevNet:
            return zswap__namespace.NetworkId.DevNet;
        case exports.NetworkId.TestNet:
            return zswap__namespace.NetworkId.TestNet;
        case exports.NetworkId.MainNet:
            return zswap__namespace.NetworkId.MainNet;
        default:
            throw new NetworkIdTypeError(String(id));
    }
};
// Module level state that will be preserved by the JavaScript module system.
let currentNetworkId = exports.NetworkId.Undeployed;
/**
 * Sets the global network identifier.
 *
 * @param id A valid {@link NetworkId} value.
 */
const setNetworkId = (id) => {
    currentNetworkId = id;
};
/**
 * Retrieves the currently set global network identifier.
 *
 * @returns The currently set {@link NetworkId}.
 */
const getNetworkId = () => currentNetworkId;
/**
 * Retrieves the currently set global network identifier as a {@link runtime.NetworkId} value.
 *
 * @returns The currently set {@link runtime.NetworkId}.
 */
const getRuntimeNetworkId = () => toRuntimeNetworkId(getNetworkId());
/**
 * Retrieves the currently set global network identifier as a {@link ledger.NetworkId} value.
 *
 * @returns The currently set {@link ledger.NetworkId}.
 */
const getLedgerNetworkId = () => toLedgerNetworkId(getNetworkId());
/**
 * Retrieves the currently set global network identifier as a {@link zswap.NetworkId} value.
 *
 * @returns The currently set {@link zswap.NetworkId}.
 */
const getZswapNetworkId = () => toZswapNetworkId(getNetworkId());
/**
 * Converts a potential network ID into a {@link NetworkId}. Returns null if the string is not
 * a valid network ID.
 *
 * @param networkId The string to convert.
 */
const stringToNetworkId = (networkId) => {
    switch (networkId) {
        case 'Undeployed':
            return exports.NetworkId.Undeployed;
        case 'DevNet':
            return exports.NetworkId.DevNet;
        case 'TestNet':
            return exports.NetworkId.TestNet;
        case 'MainNet':
            return exports.NetworkId.MainNet;
        default:
            return null;
    }
};
/**
 * Converts a network ID to hex representation. Used for debugging.
 *
 * @param networkId The network ID to convert to hex.
 */
const networkIdToHex = (networkId) => {
    switch (networkId) {
        case exports.NetworkId.Undeployed:
            return '00';
        case exports.NetworkId.DevNet:
            return '01';
        case exports.NetworkId.TestNet:
            return '02';
        case exports.NetworkId.MainNet:
            return '04';
        default:
            throw new NetworkIdTypeError(String(networkId));
    }
};

exports.NetworkIdTypeError = NetworkIdTypeError;
exports.getLedgerNetworkId = getLedgerNetworkId;
exports.getNetworkId = getNetworkId;
exports.getRuntimeNetworkId = getRuntimeNetworkId;
exports.getZswapNetworkId = getZswapNetworkId;
exports.networkIdToHex = networkIdToHex;
exports.setNetworkId = setNetworkId;
exports.stringToNetworkId = stringToNetworkId;
//# sourceMappingURL=index.cjs.map
