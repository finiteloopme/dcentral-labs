{"$message_type":"diagnostic","message":"this function takes 7 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1130,"byte_end":1144,"line_start":41,"line_end":41,"column_start":36,"column_end":50,"is_primary":false,"text":[{"text":"        let token0 = Token::new(1, token0_address, 18, Some(\"WETH\".to_string()), Some(\"Wrapped Ether\".to_string()));","highlight_start":36,"highlight_end":50}],"label":"expected `uniswap_sdk_core::prelude::Address`, found `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1126,"byte_end":1210,"line_start":41,"line_end":41,"column_start":32,"column_end":116,"is_primary":false,"text":[{"text":"        let token0 = Token::new(1, token0_address, 18, Some(\"WETH\".to_string()), Some(\"Wrapped Ether\".to_string()));","highlight_start":32,"highlight_end":116}],"label":"two arguments of type `u64` and `u64` are missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1116,"byte_end":1126,"line_start":41,"line_end":41,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"        let token0 = Token::new(1, token0_address, 18, Some(\"WETH\".to_string()), Some(\"Wrapped Ether\".to_string()));","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the expected type `uniswap_sdk_core::prelude::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":1},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":1},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":1},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":1},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":1},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":1},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":1},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":1},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":1},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Examples","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":1},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dAâ€¦6045\");","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":1},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the found type `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":1},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":1},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":1},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":1},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":1},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":1},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":1},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":1},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":1},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Examples","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":1},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dAâ€¦6045\");","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":1},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":249,"byte_end":265,"line_start":11,"line_end":11,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"use uniswap_sdk_core::prelude::*;","highlight_start":5,"highlight_end":21}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `uniswap_sdk_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":315,"byte_end":331,"line_start":13,"line_end":13,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"use alloy_primitives::Address as AlloyAddress;","highlight_start":5,"highlight_end":21}],"label":"one version of crate `alloy_primitives` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-sdk-core-5.2.0/src/entities/token.rs","byte_start":1759,"byte_end":1762,"line_start":59,"line_end":59,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"    pub const fn new(","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the arguments","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1126,"byte_end":1210,"line_start":41,"line_end":41,"column_start":32,"column_end":116,"is_primary":true,"text":[{"text":"        let token0 = Token::new(1, token0_address, 18, Some(\"WETH\".to_string()), Some(\"Wrapped Ether\".to_string()));","highlight_start":32,"highlight_end":116}],"label":null,"suggested_replacement":"(1, /* uniswap_sdk_core::prelude::Address */, 18, Some(\"WETH\".to_string()), Some(\"Wrapped Ether\".to_string()), /* u64 */, /* u64 */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 7 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:41:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let token0 = Token::new(1, token0_address, 18, Some(\"WETH\".to_string()), Some(\"Wrapped Ether\".to_string()));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `uniswap_sdk_core::prelude::Address`, found `alloy_primitives::Address`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtwo arguments of type `u64` and `u64` are missing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse uniswap_sdk_core::prelude::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `uniswap_sdk_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse uniswap_v3_sdk::prelude::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse alloy_primitives::Address as AlloyAddress;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/address.rs:87:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `uniswap_sdk_core::prelude::Address`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mwrap_fixed_bytes!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // we implement Display with the checksum, so we don't derive it\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extra_derives: [],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An Ethereum address, 20 bytes in length.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Address<20>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy_primitives::Address`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-sdk-core-5.2.0/src/entities/token.rs:59:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub const fn new(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `wrap_fixed_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let token0 = Token::new\u001b[0m\u001b[0m\u001b[38;5;9m(1, token0_address, 18, Some(\"WETH\".to_string()), Some(\"Wrapped Ether\".to_string()))\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let token0 = Token::new\u001b[0m\u001b[0m\u001b[38;5;10m(1, /* uniswap_sdk_core::prelude::Address */, 18, Some(\"WETH\".to_string()), Some(\"Wrapped Ether\".to_string()), /* u64 */, /* u64 */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 7 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1247,"byte_end":1261,"line_start":42,"line_end":42,"column_start":36,"column_end":50,"is_primary":false,"text":[{"text":"        let token1 = Token::new(1, token1_address, 6, Some(\"USDC\".to_string()), Some(\"USD Coin\".to_string()));","highlight_start":36,"highlight_end":50}],"label":"expected `uniswap_sdk_core::prelude::Address`, found `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1243,"byte_end":1321,"line_start":42,"line_end":42,"column_start":32,"column_end":110,"is_primary":false,"text":[{"text":"        let token1 = Token::new(1, token1_address, 6, Some(\"USDC\".to_string()), Some(\"USD Coin\".to_string()));","highlight_start":32,"highlight_end":110}],"label":"two arguments of type `u64` and `u64` are missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1233,"byte_end":1243,"line_start":42,"line_end":42,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"        let token1 = Token::new(1, token1_address, 6, Some(\"USDC\".to_string()), Some(\"USD Coin\".to_string()));","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the expected type `uniswap_sdk_core::prelude::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":19},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":69},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":23},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":49},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":78},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":77},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":53},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":83},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":68},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":27},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":69},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":56},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":30},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":34},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":46},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Examples","highlight_start":1,"highlight_end":19},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":32},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":50},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":72},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":79},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":94},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":39},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":48},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":54},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":60},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":53},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dAâ€¦6045\");","highlight_start":1,"highlight_end":59},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":51},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":90},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":28},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the found type `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":19},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":69},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":23},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":49},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":78},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":77},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":53},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":83},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":68},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":27},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":69},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":56},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":30},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":34},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":46},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Examples","highlight_start":1,"highlight_end":19},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":32},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":50},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":72},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":79},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":94},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":39},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":48},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":54},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":60},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":53},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dAâ€¦6045\");","highlight_start":1,"highlight_end":59},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":51},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":90},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":28},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":249,"byte_end":265,"line_start":11,"line_end":11,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"use uniswap_sdk_core::prelude::*;","highlight_start":5,"highlight_end":21}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `uniswap_sdk_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":315,"byte_end":331,"line_start":13,"line_end":13,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"use alloy_primitives::Address as AlloyAddress;","highlight_start":5,"highlight_end":21}],"label":"one version of crate `alloy_primitives` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-sdk-core-5.2.0/src/entities/token.rs","byte_start":1759,"byte_end":1762,"line_start":59,"line_end":59,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"    pub const fn new(","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the arguments","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1243,"byte_end":1321,"line_start":42,"line_end":42,"column_start":32,"column_end":110,"is_primary":true,"text":[{"text":"        let token1 = Token::new(1, token1_address, 6, Some(\"USDC\".to_string()), Some(\"USD Coin\".to_string()));","highlight_start":32,"highlight_end":110}],"label":null,"suggested_replacement":"(1, /* uniswap_sdk_core::prelude::Address */, 6, Some(\"USDC\".to_string()), Some(\"USD Coin\".to_string()), /* u64 */, /* u64 */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 7 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:42:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let token1 = Token::new(1, token1_address, 6, Some(\"USDC\".to_string()), Some(\"USD Coin\".to_string()));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `uniswap_sdk_core::prelude::Address`, found `alloy_primitives::Address`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtwo arguments of type `u64` and `u64` are missing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse uniswap_sdk_core::prelude::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `uniswap_sdk_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse uniswap_v3_sdk::prelude::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse alloy_primitives::Address as AlloyAddress;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/address.rs:87:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `uniswap_sdk_core::prelude::Address`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mwrap_fixed_bytes!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // we implement Display with the checksum, so we don't derive it\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extra_derives: [],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An Ethereum address, 20 bytes in length.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Address<20>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy_primitives::Address`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-sdk-core-5.2.0/src/entities/token.rs:59:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub const fn new(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `wrap_fixed_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let token1 = Token::new\u001b[0m\u001b[0m\u001b[38;5;9m(1, token1_address, 6, Some(\"USDC\".to_string()), Some(\"USD Coin\".to_string()))\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let token1 = Token::new\u001b[0m\u001b[0m\u001b[38;5;10m(1, /* uniswap_sdk_core::prelude::Address */, 6, Some(\"USDC\".to_string()), Some(\"USD Coin\".to_string()), /* u64 */, /* u64 */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `EphemeralTickMapDataProvider`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1357,"byte_end":1385,"line_start":44,"line_end":44,"column_start":34,"column_end":62,"is_primary":true,"text":[{"text":"        let tick_data_provider = EphemeralTickMapDataProvider::new(self.provider.clone());","highlight_start":34,"highlight_end":62}],"label":"use of undeclared type `EphemeralTickMapDataProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `EphemeralTickMapDataProvider`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:44:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tick_data_provider = EphemeralTickMapDataProvider::new(self.provider.clone());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `EphemeralTickMapDataProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::option::Option<_>: Deref` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1435,"byte_end":1439,"line_start":46,"line_end":46,"column_start":20,"column_end":24,"is_primary":true,"text":[{"text":"        let pool = Pool::new_with_tick_data_provider(","highlight_start":20,"highlight_end":24}],"label":"the trait `Deref` is not implemented for `std::option::Option<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `TickDataProvider`:\n  NoTickDataProvider\n  [Tick<I>]","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `std::option::Option<_>` to implement `TickDataProvider`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `uniswap_v3_sdk::entities::Pool`","code":null,"level":"note","spans":[{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs","byte_start":178,"byte_end":182,"line_start":7,"line_end":7,"column_start":12,"column_end":16,"is_primary":false,"text":[{"text":"pub struct Pool<TP = NoTickDataProvider>","highlight_start":12,"highlight_end":16}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs","byte_start":222,"byte_end":238,"line_start":9,"line_end":9,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"    TP: TickDataProvider,","highlight_start":9,"highlight_end":25}],"label":"required by this bound in `Pool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::option::Option<_>: Deref` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:46:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let pool = Pool::new_with_tick_data_provider(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Deref` is not implemented for `std::option::Option<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `TickDataProvider`:\u001b[0m\n\u001b[0m             NoTickDataProvider\u001b[0m\n\u001b[0m             [Tick<I>]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::option::Option<_>` to implement `TickDataProvider`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `uniswap_v3_sdk::entities::Pool`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs:9:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Pool<TP = NoTickDataProvider>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    TP: TickDataProvider,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Pool`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1588,"byte_end":1592,"line_start":51,"line_end":51,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            None,","highlight_start":13,"highlight_end":17}],"label":"expected `u128`, found `Option<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1435,"byte_end":1468,"line_start":46,"line_end":46,"column_start":20,"column_end":53,"is_primary":false,"text":[{"text":"        let pool = Pool::new_with_tick_data_provider(","highlight_start":20,"highlight_end":53}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected type `u128`\n   found enum `std::option::Option<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs","byte_start":6381,"byte_end":6408,"line_start":209,"line_end":209,"column_start":12,"column_end":39,"is_primary":true,"text":[{"text":"    pub fn new_with_tick_data_provider(","highlight_start":12,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:51:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let pool = Pool::new_with_tick_data_provider(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            None,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `u128`, found `Option<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mu128\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs:209:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_with_tick_data_provider(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::option::Option<_>: Deref` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1435,"byte_end":1620,"line_start":46,"line_end":53,"column_start":20,"column_end":10,"is_primary":true,"text":[{"text":"        let pool = Pool::new_with_tick_data_provider(","highlight_start":20,"highlight_end":54},{"text":"            token0, ","highlight_start":1,"highlight_end":21},{"text":"            token1, ","highlight_start":1,"highlight_end":21},{"text":"            FeeAmount::MEDIUM, ","highlight_start":1,"highlight_end":32},{"text":"            tick_data_provider,","highlight_start":1,"highlight_end":32},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            None","highlight_start":1,"highlight_end":17},{"text":"        ).await?;","highlight_start":1,"highlight_end":10}],"label":"the trait `Deref` is not implemented for `std::option::Option<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `TickDataProvider`:\n  NoTickDataProvider\n  [Tick<I>]","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `std::option::Option<_>` to implement `TickDataProvider`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `uniswap_v3_sdk::entities::Pool`","code":null,"level":"note","spans":[{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs","byte_start":178,"byte_end":182,"line_start":7,"line_end":7,"column_start":12,"column_end":16,"is_primary":false,"text":[{"text":"pub struct Pool<TP = NoTickDataProvider>","highlight_start":12,"highlight_end":16}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs","byte_start":222,"byte_end":238,"line_start":9,"line_end":9,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"    TP: TickDataProvider,","highlight_start":9,"highlight_end":25}],"label":"required by this bound in `Pool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::option::Option<_>: Deref` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:46:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let pool = Pool::new_with_tick_data_provider(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token0, \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token1, \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            FeeAmount::MEDIUM, \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            None\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Deref` is not implemented for `std::option::Option<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `TickDataProvider`:\u001b[0m\n\u001b[0m             NoTickDataProvider\u001b[0m\n\u001b[0m             [Tick<I>]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::option::Option<_>` to implement `TickDataProvider`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `uniswap_v3_sdk::entities::Pool`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs:9:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Pool<TP = NoTickDataProvider>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    TP: TickDataProvider,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Pool`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`Result<Pool<Option<_>>, Error>` is not a future","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1621,"byte_end":1626,"line_start":53,"line_end":53,"column_start":11,"column_end":16,"is_primary":true,"text":[{"text":"        ).await?;","highlight_start":11,"highlight_end":16}],"label":"`Result<Pool<Option<_>>, Error>` is not a future","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1621,"byte_end":1626,"line_start":53,"line_end":53,"column_start":11,"column_end":16,"is_primary":false,"text":[{"text":"        ).await?;","highlight_start":11,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":1435,"byte_end":1620,"line_start":46,"line_end":53,"column_start":20,"column_end":10,"is_primary":false,"text":[{"text":"        let pool = Pool::new_with_tick_data_provider(","highlight_start":20,"highlight_end":54},{"text":"            token0, ","highlight_start":1,"highlight_end":21},{"text":"            token1, ","highlight_start":1,"highlight_end":21},{"text":"            FeeAmount::MEDIUM, ","highlight_start":1,"highlight_end":32},{"text":"            tick_data_provider,","highlight_start":1,"highlight_end":32},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            None","highlight_start":1,"highlight_end":17},{"text":"        ).await?;","highlight_start":1,"highlight_end":10}],"label":"this call returns `std::result::Result<uniswap_v3_sdk::entities::Pool<std::option::Option<_>>, uniswap_v3_sdk::error::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Future` is not implemented for `Result<Pool<Option<_>>, Error>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"Result<Pool<Option<_>>, Error> must be a future or must implement `IntoFuture` to be awaited","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Result<Pool<Option<_>>, Error>` to implement `IntoFuture`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/kunall/scratchpad/dcentral-labs/private-eth/mcp-evm/server/target/debug/deps/mcp_evm_server-6867067b398ef06f.long-type-13645970013655331241.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the `.await`","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1620,"byte_end":1626,"line_start":53,"line_end":53,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"        ).await?;","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `Result<Pool<Option<_>>, Error>` is not a future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:53:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let pool = Pool::new_with_tick_data_provider(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m ____________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token0, \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token1, \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            FeeAmount::MEDIUM, \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            None\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m||\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m||\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Result<Pool<Option<_>>, Error>` is not a future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the `.await`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis call returns `std::result::Result<uniswap_v3_sdk::entities::Pool<std::option::Option<_>>, uniswap_v3_sdk::error::Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Future` is not implemented for `Result<Pool<Option<_>>, Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: Result<Pool<Option<_>>, Error> must be a future or must implement `IntoFuture` to be awaited\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<Pool<Option<_>>, Error>` to implement `IntoFuture`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/kunall/scratchpad/dcentral-labs/private-eth/mcp-evm/server/target/debug/deps/mcp_evm_server-6867067b398ef06f.long-type-13645970013655331241.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::option::Option<_>: Deref` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1621,"byte_end":1626,"line_start":53,"line_end":53,"column_start":11,"column_end":16,"is_primary":true,"text":[{"text":"        ).await?;","highlight_start":11,"highlight_end":16}],"label":"the trait `Deref` is not implemented for `std::option::Option<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1621,"byte_end":1626,"line_start":53,"line_end":53,"column_start":11,"column_end":16,"is_primary":false,"text":[{"text":"        ).await?;","highlight_start":11,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `TickDataProvider`:\n  NoTickDataProvider\n  [Tick<I>]","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `std::option::Option<_>` to implement `TickDataProvider`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `uniswap_v3_sdk::entities::Pool`","code":null,"level":"note","spans":[{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs","byte_start":178,"byte_end":182,"line_start":7,"line_end":7,"column_start":12,"column_end":16,"is_primary":false,"text":[{"text":"pub struct Pool<TP = NoTickDataProvider>","highlight_start":12,"highlight_end":16}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs","byte_start":222,"byte_end":238,"line_start":9,"line_end":9,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"    TP: TickDataProvider,","highlight_start":9,"highlight_end":25}],"label":"required by this bound in `Pool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::option::Option<_>: Deref` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:53:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Deref` is not implemented for `std::option::Option<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `TickDataProvider`:\u001b[0m\n\u001b[0m             NoTickDataProvider\u001b[0m\n\u001b[0m             [Tick<I>]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::option::Option<_>` to implement `TickDataProvider`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `uniswap_v3_sdk::entities::Pool`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kunall/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uniswap-v3-sdk-5.2.1/src/entities/pool.rs:9:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Pool<TP = NoTickDataProvider>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    TP: TickDataProvider,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Pool`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 8 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0277, E0308, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0277, E0308, E0433.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
