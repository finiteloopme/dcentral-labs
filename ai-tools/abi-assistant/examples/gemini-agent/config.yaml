# Gemini CLI Configuration for DeFi Agent
name: defi-assistant
model: gemini-pro
temperature: 0.7

# MCP Server Configuration
mcp_servers:
  - name: abi-assistant
    url: http://localhost:3000
    protocol: json-rpc
    timeout: 30000
    capabilities:
      - intent_interpretation
      - transaction_building
      - abi_management
      - agent_communication

# System Prompt
system_prompt: |
  You are a specialized DeFi assistant that helps users interact with Ethereum smart contracts.
  You have access to the ABI Assistant MCP server which provides powerful blockchain tools.
  
  AVAILABLE TOOLS via MCP:
  - interpret_intent: Convert natural language to specific contract calls
  - build_transaction: Create unsigned transactions ready for signing
  - simulate_transaction: Test transactions before execution
  - export_for_signing: Generate multiple signing formats (MetaMask, WalletConnect, etc.)
  - check_allowance: Verify token approvals
  - estimate_gas: Calculate gas costs
  - find_best_path: Optimize routes for swaps and strategies
  
  IMPORTANT RULES:
  1. ALWAYS simulate transactions before presenting to users
  2. CLEARLY explain risks, gas costs, and slippage
  3. NEVER store or handle private keys
  4. ALWAYS export transactions for external signing
  5. Verify contract addresses before any interaction
  6. Default to conservative slippage settings
  7. Warn about impermanent loss for liquidity provision
  
  RESPONSE STYLE:
  - Be concise but thorough about risks
  - Show transaction details in a clear format
  - Provide gas estimates in both gwei and USD
  - Explain what each transaction step does
  - Offer alternatives when available

# Agent Context
context:
  # Network Settings
  default_chain: ethereum
  supported_chains:
    - ethereum
    - polygon
    - arbitrum
    - optimism
  
  # Protocol Preferences
  preferred_protocols:
    swap:
      - Uniswap V3
      - Sushiswap
      - Curve
    lending:
      - Aave V3
      - Compound V3
    staking:
      - Lido
      - Rocket Pool
  
  # Transaction Settings
  slippage_tolerance: 0.5%
  max_slippage: 2%
  gas_mode: standard  # low, standard, fast, instant
  simulation_required: true
  
  # Safety Settings
  max_transaction_value_usd: 100000
  require_simulation: true
  warn_new_contracts: true
  check_contract_verification: true

# Response Templates
templates:
  transaction_ready: |
    ✅ Transaction prepared and simulated successfully:
    
    **Action**: {action}
    **Protocol**: {protocol}
    **Estimated Gas**: {gas_gwei} gwei (${gas_usd})
    **Max Slippage**: {slippage}%
    
    **Transaction Details**:
    {details}
    
    **Signing Options**:
    1. MetaMask: {metamask_link}
    2. WalletConnect: {walletconnect_qr}
    3. Raw JSON: {raw_json}
    
    ⚠️ Please review carefully before signing.
  
  error_template: |
    ❌ Unable to prepare transaction:
    
    **Error**: {error_message}
    **Suggestion**: {suggestion}
    
    Would you like me to try an alternative approach?

# Agent Capabilities
capabilities:
  # What this agent can do
  supported_operations:
    - token_swaps
    - liquidity_provision
    - lending_borrowing
    - staking_unstaking
    - yield_farming
    - portfolio_rebalancing
    - gas_optimization
    - arbitrage_detection
  
  # Multi-agent collaboration
  agent_network:
    enabled: true
    agent_id: gemini-defi-001
    broadcast_strategies: true
    accept_strategy_tips: true
    reputation_threshold: 0.7

# Monitoring and Logging
monitoring:
  log_transactions: true
  log_path: ./logs/gemini-agent.log
  track_gas_prices: true
  alert_on_high_gas: true
  gas_alert_threshold: 150  # gwei

# Rate Limiting
rate_limits:
  mcp_requests_per_minute: 60
  simulations_per_minute: 10
  agent_broadcasts_per_hour: 100

# Error Handling
error_handling:
  retry_attempts: 3
  retry_delay: 1000  # ms
  fallback_to_alternative_protocols: true
  user_confirmation_on_high_impact: true